; The canonical graph serves to analyze, formalize and repair
; a molecular graph read from the input

; The canonical graph serves as template for building and
; repairing structures, including (back)mapping

; The canonical graph is complete (including all hydrogens),
; allowing inferring valences and formal charges.

; The canonical graph uses standard bond lengths and angles,
; and dihedrals in some cases, based on elements and valences.

; The canonical graph is built from *bricks* and *links*.

;? A *brick* is a complete molecule.

; A *link* describes how two bricks are joined and what 
; changes apply to the bricks.

; Bricks and links have counterparts in the force field
; definitions, where they are completed with parameters.

; Force field complete bricks and links are required to
; convert the canonical graph to a topology for simulation.

; If the canonical graph is used for writing a topology
; then bonds are written as constraints


;; BRICKS

; The bricks (can) use a concise graph notation, similar to smiles
; but with explicit names. 
;
; Atoms are chained, branches are written in parentheses.
;
; Comma's can be used inside parentheses to specify multiple branches
;
; A bond/branch can include a bond to a previously named atom,
; creating a cycle.
;
; A dot can be used to indicate an unsatisfied bond (a stub)
;
; A previously defined brick can be included using <...>
;
; Atoms can be renamed using =
; 
; An atom can be selected with @ to set it as the base for 
; the atoms that follow. This is required for included
; bricks with multiple stubs (and is advised in all cases).
; (@ctivate)
;
; ! An included brick can be tagged using a number # as <#:...>,
; ! allowing referencing atoms in that (sub)brick for extending
; ! or bonding.
; -->
; An included brick can be tagged using a character as <#:...>,
; in which case the tag is added as suffix to the node names.
; This ensures uniqueness of node names, which is mandatory.
;
; Node attributes (such as element/charge) can be specified after 
; the node using {x:y}
;
; Each brick starts with the name of the brick in square brackets,
; with possibly alternative names following, separated by /
;
; Explicit bonds can be added using a subsection [ bonds ]
;
; Inconsistencies between a written graph and a bonds section
; result in warnings, except when the additional bond is preceded by !
;
; Bonds which are to be removed, despite being explicit in the graph
; are indicated in the bonds section with a ~
;
; If subsections are used, then the graph scheme must be placed 
; in the subsection [ graph ]
;
; An [ atoms ] section and [ bonds ] section are a sufficient
; alternative to specify a graph
;
; Inconsistencies between the [ atoms ] section and the [ graph ]
; raise a MartinizeBrickError (?)
;
; -X indicates that the atom with the name X is to be removed
;


;; Preprocessing:
; (X[a-b]) : generate range of branched nodes with labels Xa through Xb
;            This is a 'textual expansion' before parsing
; (X[a-b]) -> (Xa, Xb, Xc)

; /#=a-b/C#(H#[1-3])/    : generate series of nodes with branches 
;                          Ca(Ha1,Ha2,Ha3) - Cb(Hb1, Hb2, Hb3)
;                          This is a 'textal expansion' before parsing.
; /#=1-3/C#(H#[1-2])/ -> C1(H11,H12) C2(H21,H22) C3(H31,H32) 

; (/#=a-b/C#(H#[1-3]),/) : generate series of branches
; H1 C1(/#=2-4/C#(H#[1-3]),/) -> H1 C1(C2(H21,H22,H23),C3(H31,H32,H33),C4(H41,H42,H43))
 

;; Processing:
; name        : add node with name, with edge to active node 
;               (none at start, active parent at start of branch)
; -name       : remove node with name
; @name       : select name as active node
; (           : set active node as active parent
; ,           : switch to new branch at active parent
; )           : set active parent to active node
; nameA=nameB : rename node (keep edges)
; {attr=val}  : set attribute on active node (can be 
;               attributes like:  element, charge, valence, stubs
;               element is set to FIRST LETTER of name,
;               unless specified as attribute
;               attribute chiral has tuple of three nodes,
;               which define chirality according to right-hand rule
;
; !X          : connect active node to node X, which _must_ be present already
;               otherwise, using a name that is already there is an error
; <NAME>      : include brick with given name
; <':NAME>    : include brick with given name and add ' as suffix to nodes
; <NAME@X>    : include brick with given name and add edge between active
;               node and node 'X' of brick


;; Amino acids

[ BB ] N(H,.) CA(HA,.) C(O1,.) @CA {chiral:(N,C,HA)}

[ GLY / glycine       / AA::G ] <BB> HA=HA1 @CA HA2

[ ALA / alanine       / AA::A ] <BB> @CA CB(HB[1-3])

[ ASP / aspartate     / AA::D ] <BB> @CA CB(HB1,HB2) CG(OD1,OD2,HD2{pKa:3.71}) ; What about charges?

[ ASN / asparagine    / AA::N ] <BB> @CA CB(HB1,HB2) CG(OD1) ND2(HD21,HD22)

[ SER / serine        / AA::S ] <BB> @CA CB(HB1,HB2) OG HG

[ CYS / cysteine      / AA::C ] <BB> @CA CB(HB1,HB2) SG HG

[ MET / methionine    / AA::M ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(HD1,HD2) SD CE(HE[1-3])

[ THR / threonine     / AA::T ] <BB> @CA CB (OG1 HG1) CG2 (HG2[1-3])

[ VAL / valine        / AA::V ] <BB> @CA CB(HB,CG1(HG1[1-3]),CG2(HG2[1-3])) 

[ ILE / isoleucince   / AA::I ] <BB> @CA CB(HB,CG2(HG2[1-3])) CG1(HG1[1-2]) CD(HD[1-3])

[ LEU / leucine       / AA::L ] <BB> @CA CB(HB1,HB2) CG(HG1,CD1(HD1[1-3]),CD2(HD2[1-3]))

[ GLU / glutamate     / AA::E ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(OE1,OE2,HE2{pKa:4.15}) ; What about charges?

[ GLN / glutamine     / AA::Q ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(OE1) NE2(HE21,HE22)

[ PRO / proline       / AA::P ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(HD1,HD2) !C ; Loop back to already existing C

[ HIS / histidine     / AA::H ] <BB> @CA CB(HB1,HB2) CG CE1(HE1) ND1 CE1(HE1) NE2(HE2 {pKa:6.04}) CD2(HD2) !CG

[ PHE / phenylalanine / AA::F ] <BB> @CA CB(HB1,HB2) CG CD1(HD1) CE1(HE1) CZ(HZ) CE2(HE2) CD2(HD2)

[ TYR / tyrosine      / AA::Y ] <PHE> -HZ @CZ OH HH {pKa:10.10}

[ LYS / lysine        / AA::K ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(HD1,HD2) CE(HE1,HE2) NZ(HZ1,HZ2,HZ3{pKa:10.67})

[ ARG / arginine      / AA::R ] <BB> @CA CB(HB1,HB2) CG(HG1,HG2) CD(HD1,HD2) NE(HE) CZ(NH1(HH11,HH12),NH2(HH21,HH22 {pKa:12.10}))

[ TRP / tryptophan    / AA::W ] <BB> @CA CB(HB1,HB2) CG CD1(HD1) NE1(HE1) CE2 CZ2(HZ2) CH2(HH2) CZ3(HZ3) CE3(HE3) CD2(CE2) CG 


; It is also possible to write a brick as change from another brick
;; [ ASN / asparagine    / AA::N ] <ASP> -OD2 @CG ND2(HD21,HD22)

;; [ CYS / cysteine      / AA::C ] <SER> OG=SG

;; [ MET / methionine    / AA::M ] <BB> @CA /#=B,G,D/C#(H#1,H#2)/ SD CE(HE[1-3])

;; [ ILE / isoleucine    / AA::I ] <VAL> -HG13 @ CG1 CD(HD1[1-3])


;; Nucleobases

[ ADE / adenine  / NB::A ] N1 C2(H2) N3 C4 N9(H9) C8(H8) N7 C5(!C4) C6(!N1) N6(H61,H62)
[ CYT / cytidine / NB::C ] N1(H1) C2(O2) N3 C4(N4(H41,H42)) C5(H5) C6(H6) !N1
[ GUA / guanine  / NB::G ] N1(H1) C2(N2(H21,H22)) N3 C4 N9(H9) C8(H8) N7 C5(!C4) C6(!N1) O6
[ URA / uracil   / NB::U ] N1(H1) C2(O2) N3(H3) C4(O4) C5(H5) C6(H6) !N1
[ THY / thymine  / NB::T ] <URA> @C5 -H5 C5M(H5[1-3])

;; Carbohydrates

[ pentose ] /#=1-5/C#(O# H#1, H#2)/ @C5 H53 @O4 -H41 !C1
[ hexose  ] /#=1-6/C#(O# H#1, H#2)/ H63 @O5 -H51 !C1
[ RIB / ribose / CH::R ] <pentose> @C1{chiral:(O1,O4,C2,H11)} @C2{chiral:(O2,C3,C1,H21)} @C3{chiral:(O3,C4,C2,H31)} @C4{chiral:(C5,C3,O4,H51)}
[ DRB/ deoxyribose / CH::D ] <RIB> -O2 -H21




  [aliases]
    glycine purple
  [graph]
    <BB> @ CA HA=HA1 +(HA2)
  [bonds]
    CA HA 1.1 100
    ! HA1 HA2 1.2 10  ; Bond that seems not to be there, but should be according to ff
    ~ CA HA2  ; Bond that seems to be there, but should be removed according to ff
  [...]


[ PRO ]
  [ aliases ] 
    proline P
  [ graph ]
    ; <BB> @CA +CB() CG() CD(HD1 HD2)
    <BB> @CA +CB() CG() CD(HD1 HD2)
  [ bonds ]
    ! CD BB:C .. ..
    ~ CB CG


[ ALA / alanine ] <BB> @CA +CB(HB1 HB2 HB3)
[ ASP / aspartate ] <BB> @CA +CB(HB1 HB2) CG(OG NG(HG1 HG2))

[ CYS ]
  <BB> @CA +CB(HB1 HB2) SG HG


[ ACE ]
  C(O .) CA(HA1 HA2 HA3)

;; LINKS

[ BB {pH>3} ]
  @C O=O1 +O2

[ BB {pka=...} ]
  @C O=O1 +O2 HO2 

[ BB {pka=...} ]
  ; zwitterionic
  @C O=O1 +O2
  @N H=H1 +H2 H3

[ ~BB ]
  @N H=H1 +H2 H3
  [ modif.... ]
    @N -H3

[ ~BB ]
  ; modification of BB
  ; acetylation
  @N +<ACE@C>

[ 1:BB, 2:BB ]
  1@C+2@N
